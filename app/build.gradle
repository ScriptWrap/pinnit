plugins {
  alias(libs.plugins.android.application)
  alias(libs.plugins.kotlin.android)
  alias(libs.plugins.kotlin.parcelize)
  alias(libs.plugins.androidx.navigation)
  alias(libs.plugins.hilt)
  alias(libs.plugins.protobuf)
  alias(libs.plugins.ksp)
}

android {
  signingConfigs {
    release {
      storeFile file("$rootDir/release/app-release.jks")
      storePassword "${project.properties["PINNIT_KEYSTORE_PASSWORD"]}"
      keyAlias 'pinnitalias'
      keyPassword "${project.properties["PINNIT_KEY_PASSWORD"]}"
    }
  }

  namespace 'dev.sasikanth.pinnit'

  compileSdk libs.versions.sdk.compile.get().toInteger()

  defaultConfig {
    applicationId "dev.sasikanth.pinnit"
    minSdk libs.versions.sdk.min.get().toInteger()
    targetSdk libs.versions.sdk.target.get().toInteger()

    if (project.properties["VERSION_CODE"] != null) {
      versionCode = project.properties["VERSION_CODE"] as Integer
    } else {
      versionCode = 1
    }

    if (project.properties["VERSION_NAME"] != null) {
      versionName = project.properties["VERSION_NAME"]
    } else {
      versionName = "1.0.0"
    }

    testInstrumentationRunner "dev.sasikanth.pinnit.AndroidTestRunner"

    vectorDrawables.useSupportLibrary = true

    ksp {
      arg("room.schemaLocation", "$projectDir/schemas".toString())
      arg("room.incremental", "true")
    }
  }

  sourceSets {
    androidTest.assets.srcDirs += files("$projectDir/schemas".toString())

    String sharedTestDir = 'src/sharedTest/java'
    test {
      java.srcDir sharedTestDir
    }
    androidTest {
      java.srcDir sharedTestDir
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
    debug {
      applicationIdSuffix = '.debug'
    }
  }
  buildFeatures {
    viewBinding true
  }
  compileOptions {
    coreLibraryDesugaringEnabled true

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
  }
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_17.toString()

    // Enabling experimental coroutines APIs
    freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
    freeCompilerArgs += "-Xopt-in=kotlin.time.ExperimentalTime"
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${libs.versions.protoc.get()}"
  }

  // Generates the java Protobuf-lite code for the Protobufs in this project. See
  // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
  // for more information.
  generateProtoTasks {
    all().each { task ->
      task.builtins {
        java {
          option 'lite'
        }
      }
    }
  }
}

androidComponents {
  onVariants(selector().all(), { variant ->
    afterEvaluate {
      def capName = variant.name.capitalize()
      tasks.getByName("ksp${capName}Kotlin") {
        setSource(tasks.getByName("generate${capName}Proto").outputs)
      }
    }
  })
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  coreLibraryDesugaring libs.desugar.JDK
  implementation libs.kotlin.stdlib
  implementation libs.androidx.appcompat
  implementation libs.androidx.corektx
  implementation libs.androidx.fragmentktx
  implementation libs.androidx.constraintlayout
  implementation libs.bundles.androidx.navigation
  implementation libs.bundles.androidx.room
  ksp libs.androidx.room.compiler
  implementation libs.bundles.androidx.lifecycle
  implementation libs.androidx.work
  implementation libs.material
  debugImplementation libs.leakcanary
  implementation libs.bundles.coroutines
  implementation libs.hilt.android
  implementation libs.hilt.work
  ksp libs.hilt.android.compiler
  ksp libs.hilt.compiler
  implementation libs.bundles.mobius
  implementation libs.circleImageView
  implementation libs.insetterktx
  implementation libs.betterLinkMovement
  implementation libs.androidx.seekableVD
  implementation libs.androidx.datastore
  implementation libs.javalite
  implementation libs.flowBinding

  testImplementation libs.junit
  testImplementation libs.truth
  testImplementation libs.androidx.room.testing
  testImplementation libs.androidx.core.testing
  testImplementation libs.mockito
  testImplementation libs.kotlin.coroutines.test
  testImplementation libs.mobius.test
  testImplementation libs.androidx.datastore
  testImplementation(project(":sharedTestCode"))

  androidTestImplementation libs.androidx.room.testing
  androidTestImplementation libs.androidx.junit
  androidTestImplementation libs.espresso
  androidTestImplementation libs.truth
  androidTestImplementation libs.androidx.work.testing
  androidTestImplementation libs.hilt.testing
  kspAndroidTest libs.hilt.android.compiler
  androidTestImplementation libs.androidx.datastore
  androidTestImplementation(project(":sharedTestCode"))
}
